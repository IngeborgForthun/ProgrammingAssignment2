#Part A
#Caching the inverse of a matrix, creates a matrix that is the inverse of a matrix 
makeCacheMatrix <- function(x = matrix()) { #x is the argument of the function
        inv <- NULL #inv is set to NULL within the function to be filled later
        set <- function(y) {
                x <<- y  #this function assigns x to y in the parent environment
                inv <<- NULL
        }
        get <- function() x
        setinverse <- function(inverse) {
                inv <<- solve(x)
        }
        getinverse <- function() inv 
        list(set = set, get=get,  #functions are named so that we can use $ in part B
             setinverse = setinverse, 
             getinverse = getinverse)
}



#Part B 
#Computes the inverse of the matrix 
cacheSolve <- function(x, ...) {
        inv <- x$getinverse()
        if(!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        data <- x$get()
        inv <- inverse(data, ...)
        x$setinverse(inv)
        inv
}
}
